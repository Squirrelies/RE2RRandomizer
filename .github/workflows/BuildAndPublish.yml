name: "Build and Publish"

on:
  # push:
  #   branches:
  #     - master
  workflow_dispatch:
    inputs:
      versionMajor:
        description: "Major Version"
        required: false
        default: 0
        type: number
      versionMinor:
        description: "Minor Version"
        required: false
        default: 1
        type: number
      versionPatch:
        description: "Patch Version"
        required: false
        default: 0
        type: number
      versionPreReleaseTag: # Use alpha, beta, or rc for pre-release. An empty string for stable.
        description: "Pre-Release Tag"
        required: true
        default: "alpha"
        type: choice
        options:
          - "alpha"
          - "beta"
          - "RC"
          - ""
      unitTests:
        description: "Run Unit Tests"
        required: false
        default: true
        type: boolean

env:
  VCPKG_ROOT: C:/vcpkg
  MSYS2SYSTEM: clang64
  ARCH: clang-x86_64

jobs:
  Setup:
    name: Setup Environment
    runs-on: windows-latest

    outputs:
      build-number: ${{steps.build-number.outputs.current_build_number}}
      short-sha-hash: ${{steps.short-sha-hash.outputs.short_sha_hash}}
      semver-string: ${{steps.semver-string.outputs.semver_string}}

    steps:
      - name: Get new build number
        id: build-number
        run: |
          $build_number = $((${{ vars.BUILD_NUMBER }} + 1))
          echo "current_build_number=$build_number" | Set-Content $env:GITHUB_OUTPUT

      - name: Get short SHA hash
        id: short-sha-hash
        run: |
          $short_sha_hash = $(("${{ github.sha }}".substring(0, 7)))
          echo "short_sha_hash=$short_sha_hash" | Set-Content $env:GITHUB_OUTPUT

      - name: Get SemVer string
        id: semver-string
        run: |
          [string]$semver_string = "${{inputs.versionMajor}}.${{inputs.versionMinor}}.${{inputs.versionPatch}}";
          if (![string]::IsNullOrWhitespace("${{inputs.versionPreReleaseTag}}")) {
            $semver_string += "-${{inputs.versionPreReleaseTag}}";
          }
          $semver_string += "+${{steps.build-number.outputs.current_build_number}}";
          $semver_string += ".${{steps.short-sha-hash.outputs.short_sha_hash}}";
          echo "semver_string=$semver_string" | Set-Content $env:GITHUB_OUTPUT;

      - name: Setup MSYS2 ${{ env.MSYS2SYSTEM }} (${{ env.ARCH }})
        uses: msys2/setup-msys2@v2
        with:
          msystem: ${{ env.MSYS2SYSTEM }}
          install: base-devel mingw-w64-${{ env.ARCH }}-toolchain mingw-w64-${{ env.ARCH }}-cmake

  Build:
    name: Build ${{matrix.configuration}}
    runs-on: windows-latest
    needs: Setup

    strategy:
      matrix:
        configuration: [Debug, Release]

    permissions:
      contents: write
      actions: write
      attestations: write

    defaults:
      run:
        shell: pwsh

    steps:
      - name: Setup MSYS2 ${{ env.MSYS2SYSTEM }} (${{ env.ARCH }})
        uses: msys2/setup-msys2@v2
        with:
          msystem: ${{ env.MSYS2SYSTEM }}
          install: base-devel mingw-w64-${{ env.ARCH }}-toolchain mingw-w64-${{ env.ARCH }}-cmake

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.ref }}

      - name: Run CMake
        shell: msys2 {0}
        env:
          RC_VERSION_MAJOR: ${{inputs.versionMajor}}
          RC_VERSION_MINOR: ${{inputs.versionMinor}}
          RC_VERSION_PATCH: ${{inputs.versionPatch}}
          RC_VERSION_BUILD: ${{needs.Setup.outputs.build-number}}
          RC_VERSION_PRERELEASE_TAG: ${{inputs.versionPreReleaseTag}}
          RC_VERSION_BUILD_HASH: ${{needs.Setup.outputs.short-sha-hash}}
        run: cmake --workflow --preset ${{matrix.configuration}} --fresh

      - name: Run CTest
        if: ${{ success() && inputs.unitTests == 'true' }}
        shell: msys2 {0}
        run: ctest --preset ${{matrix.configuration}} --output-on-failure

      - name: Zip the publish artifacts
        working-directory: ${{github.workspace}}
        run: |
          Add-Type -assembly 'System.IO.Compression'
          Add-Type -assembly 'System.IO.Compression.FileSystem'
          [System.IO.Compression.ZipArchive]$zipFile = [System.IO.Compression.ZipFile]::Open('RE2RRandomizer-v${{needs.Setup.outputs.semver-string}}-${{matrix.configuration}}.zip', ([System.IO.Compression.ZipArchiveMode]::Create))
          [System.IO.Compression.ZipFileExtensions]::CreateEntryFromFile($zipFile, 'build/RE2RRandomizer.exe', 'RE2RRandomizer.exe')
          [System.IO.Compression.ZipFileExtensions]::CreateEntryFromFile($zipFile, 'build/RE2RRandomizer.pdb', 'RE2RRandomizer.pdb')
          [System.IO.Compression.ZipFileExtensions]::CreateEntryFromFile($zipFile, 'build/RE2RR.Common.dll', 'RE2RR.Common.dll')
          [System.IO.Compression.ZipFileExtensions]::CreateEntryFromFile($zipFile, 'build/RE2RR.Common.pdb', 'RE2RR.Common.pdb')
          [System.IO.Compression.ZipFileExtensions]::CreateEntryFromFile($zipFile, 'build/RE2RR.Database.dll', 'RE2RR.Database.dll')
          [System.IO.Compression.ZipFileExtensions]::CreateEntryFromFile($zipFile, 'build/RE2RR.Database.pdb', 'RE2RR.Database.pdb')
          [System.IO.Compression.ZipFileExtensions]::CreateEntryFromFile($zipFile, 'build/RE2RR.Types.dll', 'RE2RR.Types.dll')
          [System.IO.Compression.ZipFileExtensions]::CreateEntryFromFile($zipFile, 'build/RE2RR.Types.pdb', 'RE2RR.Types.pdb')
          [System.IO.Compression.ZipFileExtensions]::CreateEntryFromFile($zipFile, 'build/RE2RR.Hook.dll', 'RE2RR.Hook.dll')
          [System.IO.Compression.ZipFileExtensions]::CreateEntryFromFile($zipFile, 'build/RE2RR.Hook.pdb', 'RE2RR.Hook.pdb')
          [System.IO.Compression.ZipFileExtensions]::CreateEntryFromFile($zipFile, 'LICENSE', 'LICENSE')
          [System.IO.Compression.ZipFileExtensions]::CreateEntryFromFile($zipFile, 'README.md', 'README.md')
          $zipFile.Dispose()

      - name: Upload publish artifacts
        uses: actions/upload-artifact@v4
        with:
          name: RE2RRandomizer-v${{needs.Setup.outputs.semver-string}}-${{matrix.configuration}}
          path: |
            RE2RRandomizer-v${{needs.Setup.outputs.semver-string}}-${{matrix.configuration}}.zip

  Publish:
    name: Publish ${{matrix.configuration}}
    runs-on: windows-latest
    needs: [Setup, Build]

    strategy:
      matrix:
        configuration: [Debug, Release]

    defaults:
      run:
        shell: pwsh

    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          name: RE2RRandomizer-v${{needs.Setup.outputs.semver-string}}-${{matrix.configuration}}

      - name: Publish
        uses: marvinpinto/action-automatic-releases@latest
        with:
          repo_token: "${{ secrets.GITHUB_TOKEN }}"
          automatic_release_tag: "${{matrix.configuration}}-latest"
          prerelease: true
          title: "Manual Build [${{github.ref_type}}: ${{github.ref_name}}] - v${{needs.Setup.outputs.semver-string}} ${{matrix.configuration}}"
          files: |
            RE2RRandomizer-v${{needs.Setup.outputs.semver-string}}-${{matrix.configuration}}.zip

  PostRun:
    name: Post-Run
    runs-on: windows-latest
    needs: [Setup, Build, Publish]

    defaults:
      run:
        shell: pwsh

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.ref }}

      - name: Update build number variable
        env:
          GH_TOKEN: ${{ secrets.GH_VARIABLE_RW_TOKEN }}
        run: gh variable set BUILD_NUMBER -b${{ needs.Setup.outputs.build-number }}
